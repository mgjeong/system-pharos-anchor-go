/*******************************************************************************
 * Copyright 2017 Samsung Electronics All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *******************************************************************************/

// Code generated by MockGen. DO NOT EDIT.
// Source: nodeinterface.go

// Package mock_node is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockNodeInterface is a mock of NodeInterface interface
type MockNodeInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNodeInterfaceMockRecorder
}

// MockNodeInterfaceMockRecorder is the mock recorder for MockNodeInterface
type MockNodeInterfaceMockRecorder struct {
	mock *MockNodeInterface
}

// NewMockNodeInterface creates a new mock instance
func NewMockNodeInterface(ctrl *gomock.Controller) *MockNodeInterface {
	mock := &MockNodeInterface{ctrl: ctrl}
	mock.recorder = &MockNodeInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNodeInterface) EXPECT() *MockNodeInterfaceMockRecorder {
	return m.recorder
}

// AddNode mocks base method
func (m *MockNodeInterface) AddNode(body string) (int, map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "AddNode", body)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(map[string]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddNode indicates an expected call of AddNode
func (mr *MockNodeInterfaceMockRecorder) AddNode(body interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNode", reflect.TypeOf((*MockNodeInterface)(nil).AddNode), body)
}

// DeleteNode mocks base method
func (m *MockNodeInterface) DeleteNode(nodeId string) (int, error) {
	ret := m.ctrl.Call(m, "DeleteNode", nodeId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNode indicates an expected call of DeleteNode
func (mr *MockNodeInterfaceMockRecorder) DeleteNode(nodeId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNode", reflect.TypeOf((*MockNodeInterface)(nil).DeleteNode), nodeId)
}

// GetNode mocks base method
func (m *MockNodeInterface) GetNode(nodeId string) (int, map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "GetNode", nodeId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(map[string]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNode indicates an expected call of GetNode
func (mr *MockNodeInterfaceMockRecorder) GetNode(nodeId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockNodeInterface)(nil).GetNode), nodeId)
}

// GetNodes mocks base method
func (m *MockNodeInterface) GetNodes() (int, map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "GetNodes")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(map[string]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNodes indicates an expected call of GetNodes
func (mr *MockNodeInterfaceMockRecorder) GetNodes() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodes", reflect.TypeOf((*MockNodeInterface)(nil).GetNodes))
}

// UpdateNodeStatus mocks base method
func (m *MockNodeInterface) UpdateNodeStatus(nodeId, status string) error {
	ret := m.ctrl.Call(m, "UpdateNodeStatus", nodeId, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNodeStatus indicates an expected call of UpdateNodeStatus
func (mr *MockNodeInterfaceMockRecorder) UpdateNodeStatus(nodeId, status interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNodeStatus", reflect.TypeOf((*MockNodeInterface)(nil).UpdateNodeStatus), nodeId, status)
}
