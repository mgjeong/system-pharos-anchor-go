/*******************************************************************************
 * Copyright 2017 Samsung Electronics All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *******************************************************************************/

// Code generated by MockGen. DO NOT EDIT.
// Source: agentinterface.go

// Package mock_agent is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAgentInterface is a mock of AgentInterface interface
type MockAgentInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAgentInterfaceMockRecorder
}

// MockAgentInterfaceMockRecorder is the mock recorder for MockAgentInterface
type MockAgentInterfaceMockRecorder struct {
	mock *MockAgentInterface
}

// NewMockAgentInterface creates a new mock instance
func NewMockAgentInterface(ctrl *gomock.Controller) *MockAgentInterface {
	mock := &MockAgentInterface{ctrl: ctrl}
	mock.recorder = &MockAgentInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAgentInterface) EXPECT() *MockAgentInterfaceMockRecorder {
	return m.recorder
}

// AddAgent mocks base method
func (m *MockAgentInterface) AddAgent(body string) (int, map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "AddAgent", body)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(map[string]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddAgent indicates an expected call of AddAgent
func (mr *MockAgentInterfaceMockRecorder) AddAgent(body interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAgent", reflect.TypeOf((*MockAgentInterface)(nil).AddAgent), body)
}

// DeleteAgent mocks base method
func (m *MockAgentInterface) DeleteAgent(agentId string) (int, error) {
	ret := m.ctrl.Call(m, "DeleteAgent", agentId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAgent indicates an expected call of DeleteAgent
func (mr *MockAgentInterfaceMockRecorder) DeleteAgent(agentId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAgent", reflect.TypeOf((*MockAgentInterface)(nil).DeleteAgent), agentId)
}

// GetAgent mocks base method
func (m *MockAgentInterface) GetAgent(agentId string) (int, map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "GetAgent", agentId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(map[string]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAgent indicates an expected call of GetAgent
func (mr *MockAgentInterfaceMockRecorder) GetAgent(agentId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgent", reflect.TypeOf((*MockAgentInterface)(nil).GetAgent), agentId)
}

// GetAgents mocks base method
func (m *MockAgentInterface) GetAgents() (int, map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "GetAgents")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(map[string]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAgents indicates an expected call of GetAgents
func (mr *MockAgentInterfaceMockRecorder) GetAgents() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgents", reflect.TypeOf((*MockAgentInterface)(nil).GetAgents))
}

// UpdateAgentStatus mocks base method
func (m *MockAgentInterface) UpdateAgentStatus(agentId, status string) error {
	ret := m.ctrl.Call(m, "UpdateAgentStatus", agentId, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAgentStatus indicates an expected call of UpdateAgentStatus
func (mr *MockAgentInterfaceMockRecorder) UpdateAgentStatus(agentId, status interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentStatus", reflect.TypeOf((*MockAgentInterface)(nil).UpdateAgentStatus), agentId, status)
}
