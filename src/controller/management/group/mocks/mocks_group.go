/*******************************************************************************
 * Copyright 2017 Samsung Electronics All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *******************************************************************************/

// Code generated by MockGen. DO NOT EDIT.
// Source: group.go

// Package mock_group is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCommand is a mock of Command interface
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *MockCommandMockRecorder
}

// MockCommandMockRecorder is the mock recorder for MockCommand
type MockCommandMockRecorder struct {
	mock *MockCommand
}

// NewMockCommand creates a new mock instance
func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &MockCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommand) EXPECT() *MockCommandMockRecorder {
	return m.recorder
}

// CreateGroup mocks base method
func (m *MockCommand) CreateGroup(body string) (int, map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "CreateGroup", body)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(map[string]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateGroup indicates an expected call of CreateGroup
func (mr *MockCommandMockRecorder) CreateGroup(body interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockCommand)(nil).CreateGroup), body)
}

// GetGroup mocks base method
func (m *MockCommand) GetGroup(groupId string) (int, map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "GetGroup", groupId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(map[string]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGroup indicates an expected call of GetGroup
func (mr *MockCommandMockRecorder) GetGroup(groupId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroup", reflect.TypeOf((*MockCommand)(nil).GetGroup), groupId)
}

// GetGroups mocks base method
func (m *MockCommand) GetGroups() (int, map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "GetGroups")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(map[string]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGroups indicates an expected call of GetGroups
func (mr *MockCommandMockRecorder) GetGroups() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups", reflect.TypeOf((*MockCommand)(nil).GetGroups))
}

// JoinGroup mocks base method
func (m *MockCommand) JoinGroup(groupId, body string) (int, map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "JoinGroup", groupId, body)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(map[string]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// JoinGroup indicates an expected call of JoinGroup
func (mr *MockCommandMockRecorder) JoinGroup(groupId, body interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinGroup", reflect.TypeOf((*MockCommand)(nil).JoinGroup), groupId, body)
}

// LeaveGroup mocks base method
func (m *MockCommand) LeaveGroup(groupId, body string) (int, map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "LeaveGroup", groupId, body)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(map[string]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LeaveGroup indicates an expected call of LeaveGroup
func (mr *MockCommandMockRecorder) LeaveGroup(groupId, body interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveGroup", reflect.TypeOf((*MockCommand)(nil).LeaveGroup), groupId, body)
}

// DeleteGroup mocks base method
func (m *MockCommand) DeleteGroup(groupId string) (int, map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "DeleteGroup", groupId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(map[string]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteGroup indicates an expected call of DeleteGroup
func (mr *MockCommandMockRecorder) DeleteGroup(groupId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockCommand)(nil).DeleteGroup), groupId)
}
