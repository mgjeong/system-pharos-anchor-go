/*******************************************************************************
 * Copyright 2018 Samsung Electronics All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *******************************************************************************/
// Code generated by MockGen. DO NOT EDIT.
// Source: src/controller/deployment/node/nodecontroller.go

// Package mock_node is a generated GoMock package.
package mock_node

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCommand is a mock of Command interface
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *MockCommandMockRecorder
}

// MockCommandMockRecorder is the mock recorder for MockCommand
type MockCommandMockRecorder struct {
	mock *MockCommand
}

// NewMockCommand creates a new mock instance
func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &MockCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommand) EXPECT() *MockCommandMockRecorder {
	return m.recorder
}

// DeployApp mocks base method
func (m *MockCommand) DeployApp(nodeId, body string, query map[string]interface{}) (int, map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "DeployApp", nodeId, body, query)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(map[string]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeployApp indicates an expected call of DeployApp
func (mr *MockCommandMockRecorder) DeployApp(nodeId, body, query interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployApp", reflect.TypeOf((*MockCommand)(nil).DeployApp), nodeId, body, query)
}

// GetApps mocks base method
func (m *MockCommand) GetApps(nodeId string) (int, map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "GetApps", nodeId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(map[string]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetApps indicates an expected call of GetApps
func (mr *MockCommandMockRecorder) GetApps(nodeId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApps", reflect.TypeOf((*MockCommand)(nil).GetApps), nodeId)
}

// GetApp mocks base method
func (m *MockCommand) GetApp(nodeId, appId string) (int, map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "GetApp", nodeId, appId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(map[string]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetApp indicates an expected call of GetApp
func (mr *MockCommandMockRecorder) GetApp(nodeId, appId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApp", reflect.TypeOf((*MockCommand)(nil).GetApp), nodeId, appId)
}

// UpdateAppInfo mocks base method
func (m *MockCommand) UpdateAppInfo(nodeId, appId, body string) (int, map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "UpdateAppInfo", nodeId, appId, body)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(map[string]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateAppInfo indicates an expected call of UpdateAppInfo
func (mr *MockCommandMockRecorder) UpdateAppInfo(nodeId, appId, body interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAppInfo", reflect.TypeOf((*MockCommand)(nil).UpdateAppInfo), nodeId, appId, body)
}

// DeleteApp mocks base method
func (m *MockCommand) DeleteApp(nodeId, appId string) (int, map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "DeleteApp", nodeId, appId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(map[string]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeleteApp indicates an expected call of DeleteApp
func (mr *MockCommandMockRecorder) DeleteApp(nodeId, appId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApp", reflect.TypeOf((*MockCommand)(nil).DeleteApp), nodeId, appId)
}

// UpdateApp mocks base method
func (m *MockCommand) UpdateApp(nodeId, appId string, query map[string]interface{}) (int, map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "UpdateApp", nodeId, appId, query)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(map[string]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateApp indicates an expected call of UpdateApp
func (mr *MockCommandMockRecorder) UpdateApp(nodeId, appId, query interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApp", reflect.TypeOf((*MockCommand)(nil).UpdateApp), nodeId, appId, query)
}

// StartApp mocks base method
func (m *MockCommand) StartApp(nodeId, appId string) (int, map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "StartApp", nodeId, appId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(map[string]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StartApp indicates an expected call of StartApp
func (mr *MockCommandMockRecorder) StartApp(nodeId, appId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartApp", reflect.TypeOf((*MockCommand)(nil).StartApp), nodeId, appId)
}

// StopApp mocks base method
func (m *MockCommand) StopApp(nodeId, appId string) (int, map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "StopApp", nodeId, appId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(map[string]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StopApp indicates an expected call of StopApp
func (mr *MockCommandMockRecorder) StopApp(nodeId, appId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopApp", reflect.TypeOf((*MockCommand)(nil).StopApp), nodeId, appId)
}
