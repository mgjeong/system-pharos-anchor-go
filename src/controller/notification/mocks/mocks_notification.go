/*******************************************************************************
 * Copyright 2018 Samsung Electronics All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *******************************************************************************/

// Code generated by MockGen. DO NOT EDIT.
// Source: notificationapi.go

// Package mock_notification is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCommand is a mock of Command interface
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *MockCommandMockRecorder
}

// MockCommandMockRecorder is the mock recorder for MockCommand
type MockCommandMockRecorder struct {
	mock *MockCommand
}

// NewMockCommand creates a new mock instance
func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &MockCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommand) EXPECT() *MockCommandMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockCommand) Register(body string, query map[string][]string) (int, map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "Register", body, query)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(map[string]interface{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Register indicates an expected call of Register
func (mr *MockCommandMockRecorder) Register(body, query interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockCommand)(nil).Register), body, query)
}

// UnRegister mocks base method
func (m *MockCommand) UnRegister(eventId string) (int, error) {
	ret := m.ctrl.Call(m, "UnRegister", eventId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnRegister indicates an expected call of UnRegister
func (mr *MockCommandMockRecorder) UnRegister(eventId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnRegister", reflect.TypeOf((*MockCommand)(nil).UnRegister), eventId)
}

// UpdateSubscriber mocks base method
func (m *MockCommand) UpdateSubscriber() {
	m.ctrl.Call(m, "UpdateSubscriber")
}

// UpdateSubscriber indicates an expected call of UpdateSubscriber
func (mr *MockCommandMockRecorder) UpdateSubscriber() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscriber", reflect.TypeOf((*MockCommand)(nil).UpdateSubscriber))
}

// NotificationHandler mocks base method
func (m *MockCommand) NotificationHandler(eventType, body string) (int, error) {
	ret := m.ctrl.Call(m, "NotificationHandler", eventType, body)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NotificationHandler indicates an expected call of NotificationHandler
func (mr *MockCommandMockRecorder) NotificationHandler(eventType, body interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotificationHandler", reflect.TypeOf((*MockCommand)(nil).NotificationHandler), eventType, body)
}
