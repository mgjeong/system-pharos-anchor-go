/*******************************************************************************
 * Copyright 2017 Samsung Electronics All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *******************************************************************************/

// Code generated by MockGen. DO NOT EDIT.
// Source: group.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockGroupInterface is a mock of GroupInterface interface
type MockGroupInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGroupInterfaceMockRecorder
}

// MockGroupInterfaceMockRecorder is the mock recorder for MockGroupInterface
type MockGroupInterfaceMockRecorder struct {
	mock *MockGroupInterface
}

// NewMockGroupInterface creates a new mock instance
func NewMockGroupInterface(ctrl *gomock.Controller) *MockGroupInterface {
	mock := &MockGroupInterface{ctrl: ctrl}
	mock.recorder = &MockGroupInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGroupInterface) EXPECT() *MockGroupInterfaceMockRecorder {
	return m.recorder
}

// CreateGroup mocks base method
func (m *MockGroupInterface) CreateGroup() (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "CreateGroup")
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGroup indicates an expected call of CreateGroup
func (mr *MockGroupInterfaceMockRecorder) CreateGroup() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGroup", reflect.TypeOf((*MockGroupInterface)(nil).CreateGroup))
}

// GetGroup mocks base method
func (m *MockGroupInterface) GetGroup(group_id string) (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "GetGroup", group_id)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroup indicates an expected call of GetGroup
func (mr *MockGroupInterfaceMockRecorder) GetGroup(group_id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroup", reflect.TypeOf((*MockGroupInterface)(nil).GetGroup), group_id)
}

// GetAllGroups mocks base method
func (m *MockGroupInterface) GetAllGroups() ([]map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "GetAllGroups")
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllGroups indicates an expected call of GetAllGroups
func (mr *MockGroupInterfaceMockRecorder) GetAllGroups() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGroups", reflect.TypeOf((*MockGroupInterface)(nil).GetAllGroups))
}

// GetGroupMembers mocks base method
func (m *MockGroupInterface) GetGroupMembers(group_id string) ([]map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "GetGroupMembers", group_id)
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupMembers indicates an expected call of GetGroupMembers
func (mr *MockGroupInterfaceMockRecorder) GetGroupMembers(group_id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupMembers", reflect.TypeOf((*MockGroupInterface)(nil).GetGroupMembers), group_id)
}

// GetGroupMembersByAppID mocks base method
func (m *MockGroupInterface) GetGroupMembersByAppID(group_id, app_id string) ([]map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "GetGroupMembersByAppID", group_id, app_id)
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupMembersByAppID indicates an expected call of GetGroupMembersByAppID
func (mr *MockGroupInterfaceMockRecorder) GetGroupMembersByAppID(group_id, app_id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupMembersByAppID", reflect.TypeOf((*MockGroupInterface)(nil).GetGroupMembersByAppID), group_id, app_id)
}

// JoinGroup mocks base method
func (m *MockGroupInterface) JoinGroup(group_id, agent_id string) error {
	ret := m.ctrl.Call(m, "JoinGroup", group_id, agent_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// JoinGroup indicates an expected call of JoinGroup
func (mr *MockGroupInterfaceMockRecorder) JoinGroup(group_id, agent_id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinGroup", reflect.TypeOf((*MockGroupInterface)(nil).JoinGroup), group_id, agent_id)
}

// LeaveGroup mocks base method
func (m *MockGroupInterface) LeaveGroup(group_id, agent_id string) error {
	ret := m.ctrl.Call(m, "LeaveGroup", group_id, agent_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// LeaveGroup indicates an expected call of LeaveGroup
func (mr *MockGroupInterfaceMockRecorder) LeaveGroup(group_id, agent_id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveGroup", reflect.TypeOf((*MockGroupInterface)(nil).LeaveGroup), group_id, agent_id)
}

// DeleteGroup mocks base method
func (m *MockGroupInterface) DeleteGroup(group_id string) error {
	ret := m.ctrl.Call(m, "DeleteGroup", group_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGroup indicates an expected call of DeleteGroup
func (mr *MockGroupInterfaceMockRecorder) DeleteGroup(group_id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGroup", reflect.TypeOf((*MockGroupInterface)(nil).DeleteGroup), group_id)
}
