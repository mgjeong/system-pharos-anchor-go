/*******************************************************************************
 * Copyright 2017 Samsung Electronics All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *******************************************************************************/

// Code generated by MockGen. DO NOT EDIT.
// Source: image.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockImageInterface is a mock of ImageInterface interface
type MockImageInterface struct {
	ctrl     *gomock.Controller
	recorder *MockImageInterfaceMockRecorder
}

// MockImageInterfaceMockRecorder is the mock recorder for MockImageInterface
type MockImageInterfaceMockRecorder struct {
	mock *MockImageInterface
}

// NewMockImageInterface creates a new mock instance
func NewMockImageInterface(ctrl *gomock.Controller) *MockImageInterface {
	mock := &MockImageInterface{ctrl: ctrl}
	mock.recorder = &MockImageInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockImageInterface) EXPECT() *MockImageInterfaceMockRecorder {
	return m.recorder
}

// AddDockerImage mocks base method
func (m *MockImageInterface) AddDockerImage(image map[string]interface{}) (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "AddDockerImage", image)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDockerImage indicates an expected call of AddDockerImage
func (mr *MockImageInterfaceMockRecorder) AddDockerImage(image interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDockerImage", reflect.TypeOf((*MockImageInterface)(nil).AddDockerImage), image)
}

// DeleteDockerImage mocks base method
func (m *MockImageInterface) DeleteDockerImage(imageId string) error {
	ret := m.ctrl.Call(m, "DeleteDockerImage", imageId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDockerImage indicates an expected call of DeleteDockerImage
func (mr *MockImageInterfaceMockRecorder) DeleteDockerImage(imageId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDockerImage", reflect.TypeOf((*MockImageInterface)(nil).DeleteDockerImage), imageId)
}

// UpdateDockerImage mocks base method
func (m *MockImageInterface) UpdateDockerImage(imageId string, image map[string]interface{}) error {
	ret := m.ctrl.Call(m, "UpdateDockerImage", imageId, image)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDockerImage indicates an expected call of UpdateDockerImage
func (mr *MockImageInterfaceMockRecorder) UpdateDockerImage(imageId, image interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDockerImage", reflect.TypeOf((*MockImageInterface)(nil).UpdateDockerImage), imageId, image)
}

// GetDockerImage mocks base method
func (m *MockImageInterface) GetDockerImage(imageId string) (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "GetDockerImage", imageId)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDockerImage indicates an expected call of GetDockerImage
func (mr *MockImageInterfaceMockRecorder) GetDockerImage(imageId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDockerImage", reflect.TypeOf((*MockImageInterface)(nil).GetDockerImage), imageId)
}
