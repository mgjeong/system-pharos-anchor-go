/*******************************************************************************
 * Copyright 2017 Samsung Electronics All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *******************************************************************************/

// Code generated by MockGen. DO NOT EDIT.
// Source: agent.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAgentInterface is a mock of AgentInterface interface
type MockAgentInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAgentInterfaceMockRecorder
}

// MockAgentInterfaceMockRecorder is the mock recorder for MockAgentInterface
type MockAgentInterfaceMockRecorder struct {
	mock *MockAgentInterface
}

// NewMockAgentInterface creates a new mock instance
func NewMockAgentInterface(ctrl *gomock.Controller) *MockAgentInterface {
	mock := &MockAgentInterface{ctrl: ctrl}
	mock.recorder = &MockAgentInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAgentInterface) EXPECT() *MockAgentInterfaceMockRecorder {
	return m.recorder
}

// AddAgent mocks base method
func (m *MockAgentInterface) AddAgent(ip, status string, config map[string]interface{}) (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "AddAgent", ip, status, config)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAgent indicates an expected call of AddAgent
func (mr *MockAgentInterfaceMockRecorder) AddAgent(ip, status, config interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAgent", reflect.TypeOf((*MockAgentInterface)(nil).AddAgent), ip, status, config)
}

// UpdateAgentAddress mocks base method
func (m *MockAgentInterface) UpdateAgentAddress(agent_id, host, port string) error {
	ret := m.ctrl.Call(m, "UpdateAgentAddress", agent_id, host, port)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAgentAddress indicates an expected call of UpdateAgentAddress
func (mr *MockAgentInterfaceMockRecorder) UpdateAgentAddress(agent_id, host, port interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentAddress", reflect.TypeOf((*MockAgentInterface)(nil).UpdateAgentAddress), agent_id, host, port)
}

// UpdateAgentStatus mocks base method
func (m *MockAgentInterface) UpdateAgentStatus(agent_id, status string) error {
	ret := m.ctrl.Call(m, "UpdateAgentStatus", agent_id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAgentStatus indicates an expected call of UpdateAgentStatus
func (mr *MockAgentInterfaceMockRecorder) UpdateAgentStatus(agent_id, status interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentStatus", reflect.TypeOf((*MockAgentInterface)(nil).UpdateAgentStatus), agent_id, status)
}

// GetAgent mocks base method
func (m *MockAgentInterface) GetAgent(agent_id string) (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "GetAgent", agent_id)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgent indicates an expected call of GetAgent
func (mr *MockAgentInterfaceMockRecorder) GetAgent(agent_id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgent", reflect.TypeOf((*MockAgentInterface)(nil).GetAgent), agent_id)
}

// GetAllAgents mocks base method
func (m *MockAgentInterface) GetAllAgents() ([]map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "GetAllAgents")
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAgents indicates an expected call of GetAllAgents
func (mr *MockAgentInterfaceMockRecorder) GetAllAgents() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAgents", reflect.TypeOf((*MockAgentInterface)(nil).GetAllAgents))
}

// GetAgentByAppID mocks base method
func (m *MockAgentInterface) GetAgentByAppID(agent_id, app_id string) (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "GetAgentByAppID", agent_id, app_id)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentByAppID indicates an expected call of GetAgentByAppID
func (mr *MockAgentInterfaceMockRecorder) GetAgentByAppID(agent_id, app_id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentByAppID", reflect.TypeOf((*MockAgentInterface)(nil).GetAgentByAppID), agent_id, app_id)
}

// AddAppToAgent mocks base method
func (m *MockAgentInterface) AddAppToAgent(agent_id, app_id string) error {
	ret := m.ctrl.Call(m, "AddAppToAgent", agent_id, app_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAppToAgent indicates an expected call of AddAppToAgent
func (mr *MockAgentInterfaceMockRecorder) AddAppToAgent(agent_id, app_id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAppToAgent", reflect.TypeOf((*MockAgentInterface)(nil).AddAppToAgent), agent_id, app_id)
}

// DeleteAppFromAgent mocks base method
func (m *MockAgentInterface) DeleteAppFromAgent(agent_id, app_id string) error {
	ret := m.ctrl.Call(m, "DeleteAppFromAgent", agent_id, app_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAppFromAgent indicates an expected call of DeleteAppFromAgent
func (mr *MockAgentInterfaceMockRecorder) DeleteAppFromAgent(agent_id, app_id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAppFromAgent", reflect.TypeOf((*MockAgentInterface)(nil).DeleteAppFromAgent), agent_id, app_id)
}

// DeleteAgent mocks base method
func (m *MockAgentInterface) DeleteAgent(agent_id string) error {
	ret := m.ctrl.Call(m, "DeleteAgent", agent_id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAgent indicates an expected call of DeleteAgent
func (mr *MockAgentInterfaceMockRecorder) DeleteAgent(agent_id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAgent", reflect.TypeOf((*MockAgentInterface)(nil).DeleteAgent), agent_id)
}
