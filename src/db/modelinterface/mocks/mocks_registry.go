/*******************************************************************************
 * Copyright 2017 Samsung Electronics All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *******************************************************************************/

// Code generated by MockGen. DO NOT EDIT.
// Source: agent.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRegistryInterface is a mock of RegistryInterface interface
type MockRegistryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryInterfaceMockRecorder
}

// MockRegistryInterfaceMockRecorder is the mock recorder for MockRegistryInterface
type MockRegistryInterfaceMockRecorder struct {
	mock *MockRegistryInterface
}

// NewMockRegistryInterface creates a new mock instance
func NewMockRegistryInterface(ctrl *gomock.Controller) *MockRegistryInterface {
	mock := &MockRegistryInterface{ctrl: ctrl}
	mock.recorder = &MockRegistryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRegistryInterface) EXPECT() *MockRegistryInterfaceMockRecorder {
	return m.recorder
}

// AddDockerRegistry mocks base method
func (m *MockRegistryInterface) AddDockerRegistry(url string) (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "AddDockerRegistry", url)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDockerRegistry indicates an expected call of AddDockerRegistry
func (mr *MockRegistryInterfaceMockRecorder) AddDockerRegistry(url interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDockerRegistry", reflect.TypeOf((*MockRegistryInterface)(nil).AddDockerRegistry), url)
}

// GetDockerRegistries mocks base method
func (m *MockRegistryInterface) GetDockerRegistries() ([]map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "GetDockerRegistries")
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDockerRegistries indicates an expected call of GetDockerRegistries
func (mr *MockRegistryInterfaceMockRecorder) GetDockerRegistries() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDockerRegistries", reflect.TypeOf((*MockRegistryInterface)(nil).GetDockerRegistries))
}

// GetDockerRegistry mocks base method
func (m *MockRegistryInterface) GetDockerRegistry(url string) (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "GetDockerRegistry", url)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDockerRegistry indicates an expected call of GetDockerRegistry
func (mr *MockRegistryInterfaceMockRecorder) GetDockerRegistry(url interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDockerRegistry", reflect.TypeOf((*MockRegistryInterface)(nil).GetDockerRegistry), url)
}

// DeleteDockerRegistry mocks base method
func (m *MockRegistryInterface) DeleteDockerRegistry(registryId string) error {
	ret := m.ctrl.Call(m, "DeleteDockerRegistry", registryId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDockerRegistry indicates an expected call of DeleteDockerRegistry
func (mr *MockRegistryInterfaceMockRecorder) DeleteDockerRegistry(registryId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDockerRegistry", reflect.TypeOf((*MockRegistryInterface)(nil).DeleteDockerRegistry), registryId)
}

// AddDockerImages mocks base method
func (m *MockRegistryInterface) AddDockerImages(registryId string, images []map[string]interface{}) error {
	ret := m.ctrl.Call(m, "AddDockerImages", registryId, images)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDockerImages indicates an expected call of AddDockerImages
func (mr *MockRegistryInterfaceMockRecorder) AddDockerImages(registryId, images interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDockerImages", reflect.TypeOf((*MockRegistryInterface)(nil).AddDockerImages), registryId, images)
}

// GetDockerImages mocks base method
func (m *MockRegistryInterface) GetDockerImages(registryId string) ([]map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "GetDockerImages", registryId)
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDockerImages indicates an expected call of GetDockerImages
func (mr *MockRegistryInterfaceMockRecorder) GetDockerImages(registryId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDockerImages", reflect.TypeOf((*MockRegistryInterface)(nil).GetDockerImages), registryId)
}

// UpdateDockerImage mocks base method
func (m *MockRegistryInterface) UpdateDockerImage(registryId string, image map[string]interface{}) error {
	ret := m.ctrl.Call(m, "UpdateDockerImage", registryId, image)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDockerImage indicates an expected call of UpdateDockerImage
func (mr *MockRegistryInterfaceMockRecorder) UpdateDockerImage(registryId, image interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDockerImage", reflect.TypeOf((*MockRegistryInterface)(nil).UpdateDockerImage), registryId, image)
}

// DeleteDockerImage mocks base method
func (m *MockRegistryInterface) DeleteDockerImage(registryId string, image map[string]interface{}) {
	m.ctrl.Call(m, "DeleteDockerImage", registryId, image)
}

// DeleteDockerImage indicates an expected call of DeleteDockerImage
func (mr *MockRegistryInterfaceMockRecorder) DeleteDockerImage(registryId, image interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDockerImage", reflect.TypeOf((*MockRegistryInterface)(nil).DeleteDockerImage), registryId, image)
}
