// Automatically generated by MockGen. DO NOT EDIT!
// Source: agent/agent.go

package mocks

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of Command interface
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *_MockCommandRecorder
}

// Recorder for MockCommand (not exported)
type _MockCommandRecorder struct {
	mock *MockCommand
}

func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &_MockCommandRecorder{mock}
	return mock
}

func (_m *MockCommand) EXPECT() *_MockCommandRecorder {
	return _m.recorder
}

func (_m *MockCommand) AddAgent(ip string, status string, config map[string]interface{}) (map[string]interface{}, error) {
	ret := _m.ctrl.Call(_m, "AddAgent", ip, status, config)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCommandRecorder) AddAgent(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddAgent", arg0, arg1, arg2)
}

func (_m *MockCommand) UpdateAgentAddress(agent_id string, host string, port string) error {
	ret := _m.ctrl.Call(_m, "UpdateAgentAddress", agent_id, host, port)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCommandRecorder) UpdateAgentAddress(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateAgentAddress", arg0, arg1, arg2)
}

func (_m *MockCommand) UpdateAgentStatus(agent_id string, status string) error {
	ret := _m.ctrl.Call(_m, "UpdateAgentStatus", agent_id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCommandRecorder) UpdateAgentStatus(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateAgentStatus", arg0, arg1)
}

func (_m *MockCommand) GetAgent(agent_id string) (map[string]interface{}, error) {
	ret := _m.ctrl.Call(_m, "GetAgent", agent_id)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCommandRecorder) GetAgent(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAgent", arg0)
}

func (_m *MockCommand) GetAllAgents() ([]map[string]interface{}, error) {
	ret := _m.ctrl.Call(_m, "GetAllAgents")
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCommandRecorder) GetAllAgents() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAllAgents")
}

func (_m *MockCommand) GetAgentByAppID(agent_id string, app_id string) (map[string]interface{}, error) {
	ret := _m.ctrl.Call(_m, "GetAgentByAppID", agent_id, app_id)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCommandRecorder) GetAgentByAppID(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAgentByAppID", arg0, arg1)
}

func (_m *MockCommand) AddAppToAgent(agent_id string, app_id string) error {
	ret := _m.ctrl.Call(_m, "AddAppToAgent", agent_id, app_id)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCommandRecorder) AddAppToAgent(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddAppToAgent", arg0, arg1)
}

func (_m *MockCommand) DeleteAppFromAgent(agent_id string, app_id string) error {
	ret := _m.ctrl.Call(_m, "DeleteAppFromAgent", agent_id, app_id)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCommandRecorder) DeleteAppFromAgent(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteAppFromAgent", arg0, arg1)
}

func (_m *MockCommand) DeleteAgent(agent_id string) error {
	ret := _m.ctrl.Call(_m, "DeleteAgent", agent_id)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCommandRecorder) DeleteAgent(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteAgent", arg0)
}
