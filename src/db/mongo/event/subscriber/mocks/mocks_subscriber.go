/*******************************************************************************
 * Copyright 2018 Samsung Electronics All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *******************************************************************************/

// Code generated by MockGen. DO NOT EDIT.
// Source: subscriber.go

// Package mock_subscriber is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCommand is a mock of Command interface
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *MockCommandMockRecorder
}

// MockCommandMockRecorder is the mock recorder for MockCommand
type MockCommandMockRecorder struct {
	mock *MockCommand
}

// NewMockCommand creates a new mock instance
func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &MockCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommand) EXPECT() *MockCommandMockRecorder {
	return m.recorder
}

// AddSubscriber mocks base method
func (m *MockCommand) AddSubscriber(id, eventType, url string, status, eventId []string, queries map[string][]string) error {
	ret := m.ctrl.Call(m, "AddSubscriber", id, eventType, url, status, eventId, queries)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSubscriber indicates an expected call of AddSubscriber
func (mr *MockCommandMockRecorder) AddSubscriber(id, eventType, url, status, eventId, queries interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubscriber", reflect.TypeOf((*MockCommand)(nil).AddSubscriber), id, eventType, url, status, eventId, queries)
}

// GetSubscribers mocks base method
func (m *MockCommand) GetSubscribers() ([]map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "GetSubscribers")
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscribers indicates an expected call of GetSubscribers
func (mr *MockCommandMockRecorder) GetSubscribers() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscribers", reflect.TypeOf((*MockCommand)(nil).GetSubscribers))
}

// GetSubscriber mocks base method
func (m *MockCommand) GetSubscriber(id string) (map[string]interface{}, error) {
	ret := m.ctrl.Call(m, "GetSubscriber", id)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriber indicates an expected call of GetSubscriber
func (mr *MockCommandMockRecorder) GetSubscriber(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriber", reflect.TypeOf((*MockCommand)(nil).GetSubscriber), id)
}

// DeleteSubscriber mocks base method
func (m *MockCommand) DeleteSubscriber(id string) error {
	ret := m.ctrl.Call(m, "DeleteSubscriber", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscriber indicates an expected call of DeleteSubscriber
func (mr *MockCommandMockRecorder) DeleteSubscriber(id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscriber", reflect.TypeOf((*MockCommand)(nil).DeleteSubscriber), id)
}
