// Automatically generated by MockGen. DO NOT EDIT!
// Source: image/image.go

package mocks

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of Command interface
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *_MockCommandRecorder
}

// Recorder for MockCommand (not exported)
type _MockCommandRecorder struct {
	mock *MockCommand
}

func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &_MockCommandRecorder{mock}
	return mock
}

func (_m *MockCommand) EXPECT() *_MockCommandRecorder {
	return _m.recorder
}

func (_m *MockCommand) AddDockerImage(image map[string]interface{}) (map[string]interface{}, error) {
	ret := _m.ctrl.Call(_m, "AddDockerImage", image)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCommandRecorder) AddDockerImage(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddDockerImage", arg0)
}

func (_m *MockCommand) DeleteDockerImage(imageId string) error {
	ret := _m.ctrl.Call(_m, "DeleteDockerImage", imageId)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCommandRecorder) DeleteDockerImage(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteDockerImage", arg0)
}

func (_m *MockCommand) UpdateDockerImage(imageId string, image map[string]interface{}) error {
	ret := _m.ctrl.Call(_m, "UpdateDockerImage", imageId, image)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCommandRecorder) UpdateDockerImage(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateDockerImage", arg0, arg1)
}

func (_m *MockCommand) GetDockerImage(imageId string) (map[string]interface{}, error) {
	ret := _m.ctrl.Call(_m, "GetDockerImage", imageId)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCommandRecorder) GetDockerImage(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDockerImage", arg0)
}
