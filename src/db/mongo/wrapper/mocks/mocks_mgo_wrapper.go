// Automatically generated by MockGen. DO NOT EDIT!
// Source: mgo_wrapper.go

package mock_wrapper

import (
	. "db/mongo/wrapper"
	gomock "github.com/golang/mock/gomock"
)

// Mock of Session interface
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *_MockSessionRecorder
}

// Recorder for MockSession (not exported)
type _MockSessionRecorder struct {
	mock *MockSession
}

func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &_MockSessionRecorder{mock}
	return mock
}

func (_m *MockSession) EXPECT() *_MockSessionRecorder {
	return _m.recorder
}

func (_m *MockSession) DB(name string) Database {
	ret := _m.ctrl.Call(_m, "DB", name)
	ret0, _ := ret[0].(Database)
	return ret0
}

func (_mr *_MockSessionRecorder) DB(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DB", arg0)
}

func (_m *MockSession) Close() {
	_m.ctrl.Call(_m, "Close")
}

func (_mr *_MockSessionRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

// Mock of Connection interface
type MockConnection struct {
	ctrl     *gomock.Controller
	recorder *_MockConnectionRecorder
}

// Recorder for MockConnection (not exported)
type _MockConnectionRecorder struct {
	mock *MockConnection
}

func NewMockConnection(ctrl *gomock.Controller) *MockConnection {
	mock := &MockConnection{ctrl: ctrl}
	mock.recorder = &_MockConnectionRecorder{mock}
	return mock
}

func (_m *MockConnection) EXPECT() *_MockConnectionRecorder {
	return _m.recorder
}

func (_m *MockConnection) Dial(url string) (Session, error) {
	ret := _m.ctrl.Call(_m, "Dial", url)
	ret0, _ := ret[0].(Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockConnectionRecorder) Dial(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Dial", arg0)
}

// Mock of Database interface
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *_MockDatabaseRecorder
}

// Recorder for MockDatabase (not exported)
type _MockDatabaseRecorder struct {
	mock *MockDatabase
}

func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &_MockDatabaseRecorder{mock}
	return mock
}

func (_m *MockDatabase) EXPECT() *_MockDatabaseRecorder {
	return _m.recorder
}

func (_m *MockDatabase) C(name string) Collection {
	ret := _m.ctrl.Call(_m, "C", name)
	ret0, _ := ret[0].(Collection)
	return ret0
}

func (_mr *_MockDatabaseRecorder) C(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "C", arg0)
}

// Mock of Collection interface
type MockCollection struct {
	ctrl     *gomock.Controller
	recorder *_MockCollectionRecorder
}

// Recorder for MockCollection (not exported)
type _MockCollectionRecorder struct {
	mock *MockCollection
}

func NewMockCollection(ctrl *gomock.Controller) *MockCollection {
	mock := &MockCollection{ctrl: ctrl}
	mock.recorder = &_MockCollectionRecorder{mock}
	return mock
}

func (_m *MockCollection) EXPECT() *_MockCollectionRecorder {
	return _m.recorder
}

func (_m *MockCollection) Find(query interface{}) Query {
	ret := _m.ctrl.Call(_m, "Find", query)
	ret0, _ := ret[0].(Query)
	return ret0
}

func (_mr *_MockCollectionRecorder) Find(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Find", arg0)
}

func (_m *MockCollection) Insert(docs ...interface{}) error {
	_s := []interface{}{}
	for _, _x := range docs {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Insert", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCollectionRecorder) Insert(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Insert", arg0...)
}

func (_m *MockCollection) Remove(selector interface{}) error {
	ret := _m.ctrl.Call(_m, "Remove", selector)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCollectionRecorder) Remove(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Remove", arg0)
}

func (_m *MockCollection) Update(selector interface{}, update interface{}) error {
	ret := _m.ctrl.Call(_m, "Update", selector, update)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCollectionRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Update", arg0, arg1)
}

// Mock of Query interface
type MockQuery struct {
	ctrl     *gomock.Controller
	recorder *_MockQueryRecorder
}

// Recorder for MockQuery (not exported)
type _MockQueryRecorder struct {
	mock *MockQuery
}

func NewMockQuery(ctrl *gomock.Controller) *MockQuery {
	mock := &MockQuery{ctrl: ctrl}
	mock.recorder = &_MockQueryRecorder{mock}
	return mock
}

func (_m *MockQuery) EXPECT() *_MockQueryRecorder {
	return _m.recorder
}

func (_m *MockQuery) All(result interface{}) error {
	ret := _m.ctrl.Call(_m, "All", result)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockQueryRecorder) All(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "All", arg0)
}

func (_m *MockQuery) One(result interface{}) error {
	ret := _m.ctrl.Call(_m, "One", result)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockQueryRecorder) One(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "One", arg0)
}
