// Automatically generated by MockGen. DO NOT EDIT!
// Source: group/group.go

package mocks

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of Command interface
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *_MockCommandRecorder
}

// Recorder for MockCommand (not exported)
type _MockCommandRecorder struct {
	mock *MockCommand
}

func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &_MockCommandRecorder{mock}
	return mock
}

func (_m *MockCommand) EXPECT() *_MockCommandRecorder {
	return _m.recorder
}

func (_m *MockCommand) CreateGroup() (map[string]interface{}, error) {
	ret := _m.ctrl.Call(_m, "CreateGroup")
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCommandRecorder) CreateGroup() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateGroup")
}

func (_m *MockCommand) GetGroup(group_id string) (map[string]interface{}, error) {
	ret := _m.ctrl.Call(_m, "GetGroup", group_id)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCommandRecorder) GetGroup(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetGroup", arg0)
}

func (_m *MockCommand) GetAllGroups() ([]map[string]interface{}, error) {
	ret := _m.ctrl.Call(_m, "GetAllGroups")
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCommandRecorder) GetAllGroups() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAllGroups")
}

func (_m *MockCommand) GetGroupMembers(group_id string) ([]map[string]interface{}, error) {
	ret := _m.ctrl.Call(_m, "GetGroupMembers", group_id)
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCommandRecorder) GetGroupMembers(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetGroupMembers", arg0)
}

func (_m *MockCommand) GetGroupMembersByAppID(group_id string, app_id string) ([]map[string]interface{}, error) {
	ret := _m.ctrl.Call(_m, "GetGroupMembersByAppID", group_id, app_id)
	ret0, _ := ret[0].([]map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCommandRecorder) GetGroupMembersByAppID(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetGroupMembersByAppID", arg0, arg1)
}

func (_m *MockCommand) JoinGroup(group_id string, agent_id string) error {
	ret := _m.ctrl.Call(_m, "JoinGroup", group_id, agent_id)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCommandRecorder) JoinGroup(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "JoinGroup", arg0, arg1)
}

func (_m *MockCommand) LeaveGroup(group_id string, agent_id string) error {
	ret := _m.ctrl.Call(_m, "LeaveGroup", group_id, agent_id)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCommandRecorder) LeaveGroup(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LeaveGroup", arg0, arg1)
}

func (_m *MockCommand) DeleteGroup(group_id string) error {
	ret := _m.ctrl.Call(_m, "DeleteGroup", group_id)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCommandRecorder) DeleteGroup(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteGroup", arg0)
}
