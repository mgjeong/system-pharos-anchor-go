/*******************************************************************************
 * Copyright 2017 Samsung Electronics All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *******************************************************************************/
// Code generated by MockGen. DO NOT EDIT.
// Source: messenger.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockhttpWrapper is a mock of httpWrapper interface
type MockhttpWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockhttpWrapperMockRecorder
}

// MockhttpWrapperMockRecorder is the mock recorder for MockhttpWrapper
type MockhttpWrapperMockRecorder struct {
	mock *MockhttpWrapper
}

// NewMockhttpWrapper creates a new mock instance
func NewMockhttpWrapper(ctrl *gomock.Controller) *MockhttpWrapper {
	mock := &MockhttpWrapper{ctrl: ctrl}
	mock.recorder = &MockhttpWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockhttpWrapper) EXPECT() *MockhttpWrapperMockRecorder {
	return m.recorder
}

// DoWrapper mocks base method
func (m *MockhttpWrapper) DoWrapper(req *http.Request) (*http.Response, error) {
	ret := m.ctrl.Call(m, "DoWrapper", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoWrapper indicates an expected call of DoWrapper
func (mr *MockhttpWrapperMockRecorder) DoWrapper(req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoWrapper", reflect.TypeOf((*MockhttpWrapper)(nil).DoWrapper), req)
}

// MockCommand is a mock of Command interface
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *MockCommandMockRecorder
}

// MockCommandMockRecorder is the mock recorder for MockCommand
type MockCommandMockRecorder struct {
	mock *MockCommand
}

// NewMockCommand creates a new mock instance
func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &MockCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommand) EXPECT() *MockCommandMockRecorder {
	return m.recorder
}

// SendHttpRequest mocks base method
func (m *MockCommand) SendHttpRequest(method string, urls []string, queries map[string]interface{}, dataOptional ...[]byte) ([]int, []string) {
	varargs := []interface{}{method, urls, queries}
	for _, a := range dataOptional {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendHttpRequest", varargs...)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].([]string)
	return ret0, ret1
}

// SendHttpRequest indicates an expected call of SendHttpRequest
func (mr *MockCommandMockRecorder) SendHttpRequest(method, urls, queries interface{}, dataOptional ...interface{}) *gomock.Call {
	varargs := append([]interface{}{method, urls, queries}, dataOptional...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHttpRequest", reflect.TypeOf((*MockCommand)(nil).SendHttpRequest), varargs...)
}
