swagger: '2.0'
info:
  title: Pharos Anchor API for Single Edge Device
  description: >-
    Pharos Anchor provides service deployment and device management functionalities to an edge device with a container-based edge S/W platform.
    This description explains how to use Pharos Anchor Agent APIs to deploy, update,
    start, stop, delete service and manage edge devices.
    
    Pharos Anchor's base url should be changed depending on whether Pharos Anchor is behind a reverse proxy.
    
    
    Case)
    
    1. Default Pharos Anchor's base url  - http://'IP':48099/api/v1/~
    
    2. Pharos Anchor's base url behind a reverse proxy - http://'IP':80/pharos-anchor/api/v1/~
    
  version: v1-20180523
schemes:
  - http
tags:
  - name: Health
    description: Health check of Pharos Anchor
  - name: Application Deployment
    description: Distribution & Control Apps
  - name: Pharos Node Management
    description: Registered Pharos Node Management Functionalities
  - name: Resource Monitoring
    description: Resource information collector
  - name: Configuration
    description: Properties and configurations of Pharos Node
  - name: Notification
    description: Pharos Node and Service status event monitoring
  - name: Device Control
    description: Control a device with Pharos Node. These are available when there is a system container which can control devices
  - name: Search
    description: Search groups/nodes/apps which match given conditions
  - name: Registry Management
    description: Manage registries to receive events
paths:
  '/api/v1/ping':
    post:
      tags:
        - Health
      description: Check whether Pharos Anchor is up and responding to requests.
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation.
  '/api/v1/management/nodes/register':
    post:
      tags:
        - Pharos Node Management
      description: |
        Request to register new pharos node. This api is called automatically after a pharos node container starts successfully.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: ip
          in: body
          description: >-
           The sender address of the registration message. This is used to add node information to database.
          required: false
          schema:
            $ref: '#/definitions/request_of_node_register'
      responses:
        '200':
          description: Node insert succeeds
          schema:
            $ref: '#/definitions/response_of_node_register'
  '/api/v1/management/nodes/{node_id}/unregister':
    post:
      tags:
        - Pharos Node Management
      description: |
        Request to unregister specific node
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: node_id
          in: path
          description: ID of registered node
          required: true
          type: string
      responses:
        '200':
          description: Node delete succeeds
  '/api/v1/management/nodes/{node_id}/ping':
    post:
      tags:
        - Pharos Node Management
      description: |
        Request to check whether a specific node is up and sending next request in interval time
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: node_id
          in: path
          description: ID of registered node
          required: true
          type: string
        - name: interval
          in: body
          required: true
          schema:
            $ref: '#/definitions/health_check_interval'
      responses:
        '200':
          description: Application get succeeds
          schema:
            $ref: '#/definitions/response_of_node_register'
  '/api/v1/management/nodes':
    get:
      tags:
        - Pharos Node Management
      description: |
        Request get list of nodes
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: Application get succeeds
          schema:
            $ref: '#/definitions/response_of_get_nodes'
  '/api/v1/management/nodes/{node_id}':
    get:
      tags:
        - Pharos Node Management
      description: |
        Request get target node's information
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: node_id
          in: path
          description: ID of registered node
          required: true
          type: string
      responses:
        '200':
          description: Application get succeeds
          schema:
            $ref: '#/definitions/response_of_get_node'
  '/api/v1/management/nodes/{node_id}/apps/deploy':
    post:
      tags:
        - Application Deployment
      description: |
        Request an deployment of edge services to a specific edge device
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: node_id
          in: path
          description: ID of registered node
          required: true
          type: string
        - name: docker-compose.yml
          in: body
          description: >-
            Information of multi-container docker applications include several
            images information and containers execute option.
          required: true
          schema:
            $ref: '#/definitions/docker-compose'
      responses:
        '201':
          description: docker service deployment succeeds
          headers:
            location:
              description: >-
                URI pointing to the location of the newly deployed App, e.g.
                http://192.168.0.1:8080/api/v1/management/nodes/{node_id}/apps/{app_id}
              type: string
          schema:
            $ref: '#/definitions/response_of_deployment'
  '/api/v1/management/nodes/{node_id}/apps':
    get:
      tags:
        - Application Deployment
      description: |
        Request list of applications that is deployed to target edge device
      produces:
        - application/json
      parameters:
        - name: node_id
          in: path
          description: ID of registered node
          required: true
          type: string
      responses:
        '200':
          description: list of applications
          schema:
            $ref: '#/definitions/response_of_app_list'
  '/api/v1/management/nodes/{node_id}/apps/{app_id}':
    get:
      tags:
        - Application Deployment
      description: |
        Request get target application's information
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: node_id
          in: path
          description: ID of registered node
          required: true
          type: string
        - name: app_id
          in: path
          description: ID of deployed app on target node
          required: true
          type: string
      responses:
        '200':
          description: Application get succeeds
          schema:
            $ref: '#/definitions/response_of_get_app'
    post:
      tags:
        - Application Deployment
      description: |
        Request update target application's information
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: node_id
          in: path
          description: ID of registered node
          required: true
          type: string
        - name: app_id
          in: path
          description: ID of deployed app on target node
          required: true
          type: string
        - name: docker-compose.yml
          in: body
          description: >-
            Information of multi-container docker applications include several
            images information and containers execute option.
          required: true
          schema:
            $ref: '#/definitions/docker-compose'
      responses:
        '200':
          description: Application update succeeds
    delete:
      tags:
        - Application Deployment
      description: |
        Request delete target application
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: node_id
          in: path
          description: ID of registered node
          required: true
          type: string
        - name: app_id
          in: path
          description: ID of deployed app on target node
          required: true
          type: string
      responses:
        '200':
          description: Application delete succeeds
  '/api/v1/management/nodes/{node_id}/apps/{app_id}/update':
    post:
      tags:
        - Application Deployment
      description: >
        Request checking and updating all of images which is included target
        application
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: node_id
          in: path
          description: ID of registered node
          required: true
          type: string
        - name: app_id
          in: path
          description: ID of deployed app on target node
          required: true
          type: string
      responses:
        '200':
          description: Application update succeeds
  '/api/v1/management/nodes/{node_id}/apps/{app_id}/start':
    post:
      tags:
        - Application Deployment
      description: |
        Request start target application
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: node_id
          in: path
          description: ID of registered node
          required: true
          type: string
        - name: app_id
          in: path
          description: ID of deployed app on target node
          required: true
          type: string
      responses:
        '200':
          description: Application start succeeds
  '/api/v1/management/nodes/{node_id}/apps/{app_id}/stop':
    post:
      tags:
        - Application Deployment
      description: |
        Request stop target application
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: node_id
          in: path
          description: ID of registered node
          required: true
          type: string
        - name: app_id
          in: path
          description: ID of deployed app on target node
          required: true
          type: string
      responses:
        '200':
          description: Application stop succeeds
  '/api/v1/monitoring/nodes/{node_id}/apps/{app_id}/resource':
    get:
      tags:
        - Resource Monitoring
      description: >-
        Request to get app's resource usage.
      parameters:
        - name: node_id
          in: path
          description: ID of registered node
          required: true
          type: string
        - name: app_id
          in: path
          description: ID of the app assigned by Pharos
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
          schema:
            $ref: "#/definitions/response_of_app_resource"
  '/api/v1/monitoring/nodes/{node_id}/resource':
    get:
      tags:
        - Resource Monitoring
      description: |
        Request to get the device information (cpu/memory/disk usage)
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: node_id
          in: path
          description: ID of registered node
          required: true
          type: string
      responses:
        '200':
          description: Resource information get succeeds
          schema:
            $ref: '#/definitions/response_of_get_resource'
  '/api/v1/management/nodes/{node_id}/configuration':
    get:
      tags:
        - Configuration
      description: 'Returns device properties and configurations (deviceName, pinginterval, os, platform, processor)'
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: node_id
          in: path
          description: ID of registered node
          required: true
          type: string
      responses:
        '200':
          description: Configuration get succeeds
          schema:
            $ref: '#/definitions/response_of_get_configuration'
    post:
      tags:
        - Configuration
      description: 'Update device configurations (deviceName, pinginterval)'
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: node_id
          in: path
          description: ID of registered node
          required: true
          type: string
        - name: properties
          in: body
          description: >-
            Configuration sets to be updated.
          required: false
          schema:
            $ref: '#/definitions/configuration'
      responses:
        '200':
          description: Configuration update succeeds
  '/api/v1/notification':
    post:
      tags:
        - Notification
      description: 'Subscribe pharos node & service status event'
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: notification
          in: body
          description: >-
            Subscriber information.
          required: true
          schema:
            $ref: '#/definitions/notification'
      responses:
        '200':
          description: Subscriber registration succeeds
          schema:
            $ref: '#/definitions/response_of_notification'
  '/api/v1/notification/{subscriber_id}':
    delete:
      tags:
        - Notification
      description: 'Unregister the subscriber specified by {subscriber_id}'
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: subscriber_id
          in: path
          description: ID of the subscriber assigned by '/api/v1/notification' api
          required: true
          type: string
      responses:
        '200':
          description: Subscriber unregistration succeeds
  '/api/v1/search/groups':
    get:
      tags:
        - Search
      description: 'Search groups which matched given query conditions'
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: groupId
          in: query
          description: An ID of the group to find
          required: false
          type: string
        - name: nodeId
          in: query
          description: An ID of the node to find
          required: false
          type: string
        - name: appId
          in: query
          description: An ID of the app to find
          required: false
          type: string
        - name: imageName
          in: query
          description: A name of the image to find
          required: false
          type: string
      responses:
        '200':
          description: Search succeeds
          schema:
            $ref: '#/definitions/response_of_search_groups'
  '/api/v1/search/nodes':
    get:
      tags:
        - Search
      description: 'Search nodes which matched given query conditions'
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: groupId
          in: query
          description: An ID of the group to find
          required: false
          type: string
        - name: nodeId
          in: query
          description: An ID of the node to find
          required: false
          type: string
        - name: appId
          in: query
          description: An ID of the app to find
          required: false
          type: string
        - name: imageName
          in: query
          description: A name of the image to find
          required: false
          type: string
      responses:
        '200':
          description: Search succeeds
          schema:
            $ref: '#/definitions/response_of_search_nodes'
  '/api/v1/search/apps':
    get:
      tags:
        - Search
      description: 'Search apps which matched given query conditions'
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: groupId
          in: query
          description: An ID of the group to find
          required: false
          type: string
        - name: nodeId
          in: query
          description: An ID of the node to find
          required: false
          type: string
        - name: appId
          in: query
          description: An ID of the app to find
          required: false
          type: string
        - name: imageName
          in: query
          description: A name of the image to find
          required: false
          type: string
      responses:
        '200':
          description: Search succeeds
          schema:
            $ref: '#/definitions/response_of_search_apps'
  '/api/v1/management/nodes/{node_id}/reboot':
    post:
      tags:
        - Device Control
      description: Reboot a device
      parameters:
        - name : node_id
          in: path
          description: ID of registered node
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
  '/api/v1/management/nodes/{node_id}/restore':
    post:
      tags:
        - Device Control
      description: Reset a device to initial state
      parameters:
        - name : node_id
          in: path
          description: ID of registered node
          required: true
          type: string
      responses:
        '200':
          description: Successful operation.
  '/api/v1/management/registries':
    post:
      tags:
        - Registry Management
      description: |
        Add a registry to receive events
      parameters: 
        - name: ip
          in: body
          required: true
          schema:
            $ref: '#/definitions/registry_ip'
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/response_of_add_registries'
    get:
      tags:
        - Registry Management
      description: |
        Get a list of added registries
      produces:
        - applicaion/json
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/response_of_get_registries'
  '/api/v1/management/registries/{registry_id}':
    delete:
      tags:
        - Registry Management
      parameters:
        - name: registry_id
          in: path
          description: ID of an added registry
          required: true
          type: string
      description: |
        Delete an added registry
      responses:
        '200':
          description: Successful operation
definitions:
  registry_ip:
    required:
      - ip
    properties:
      ip:
        type: string
        example: registry_ip
  registry:
    required:
      - id
      - url
    properties:
      id:
        type: string
        example: registry_id_sample
      url:
        type: string
        example: url_sample
  service_name:
    required:
      - image
    properties:
      image:
        type: string
        example: Specify the image to start the container
  services:
    required:
      - Specify the service name 
    properties:
      Specify the service name:
        $ref: '#/definitions/service_name'
  docker-compose:
    required:
      - version
      - services
    properties:
      version:
        type: integer
        example: 1
      services:
        $ref: '#/definitions/services'
  node:
    required:
      - id
      - ip
      - status
      - apps
    properties:
      id:
        type: string
        example: node_id_sample
      ip:
        type: string
        example: 192.168.0.1
      status:
        type: string
        example: connected
      apps:
        example:
          - app_id_sample1
          - app_id_sample2
  health_check_interval:
    required:
      - interval
    properties:
      interval:
        type: integer
        example: 10
  cpu:
    description: Information about cpu usage of edge device where Pharos Node exists
    example: ["8.00%", "3.03%", "7.07%", "16.16%", "9.90%", "18.00%", "11.22%", "4.12%"]
  mem:
    description: Information about memory usage of edge device where Pharos Node exists
    example: {"free":"0KB", "total":"0KB", "used":"0KB", "usedpercent":"0%"}
  disk:
    description: Information about disk usage of edge device where Pharos Node exists
    example: [{"free":"0G", "path":"/root", "total":"0G", "used":"0G", "usedpercent":"0%"}]
  configuration:
    required:
      - properties
    properties:
      properties:
        type: array
        example:
          - {"devicename":"EdgeDevice"}
          - {"pinginterval":"10"}
  notification:
    required:
      - url
      - event
    properties:
      url:
        type: string
        description: Event push api of subscriber
        example: "http://192.168.0.1:8088/event"
      event:
        type: string
        description: Event type(node or app) and status
        example: {"type":"node", "status":["connected", "disconnected"]}
  search_app_return:
    required:
      - id
      - images
      - services
    properties:
      id:
        type: string
        example: app_id_sample
      images:
        type: string
        example: image_name_sample(Without tag)
      services:
        type: string
        example: service_name_sample
  search_node_return:
    required:
      - id
      - ip
      - status
      - apps
      - config
    properties:
      id:
        type: string
        example: node_id_sample
      ip:
        type: string
        example: 192.168.0.1
      status:
        type: string
        example: connected
      apps:
        example:
          - app_id_sample1
          - app_id_sample2
      config:
        $ref: '#/definitions/response_of_get_configuration'
  search_group_return:
    required:
      - id
      - members
      - name
    properties:
      id:
        type: string
        example: gropu_id_sample
      members:
        type: array
        example: ["node_id_sample", "node_id_sample2"]
      name:
        type: string
        example: EdgeGroup
  response_of_get_registries:
    required:
      - registries
    properties:
      registries:
        type: array
        items:
          $ref: '#/definitions/registry'
  response_of_add_registries:
    required:
      - id
    properties:
      id:
       type: string
       example: registry_id_sample
  request_of_node_register:
    required:
      - ip
      - config
    properties:
      ip:
        type: string
        example: 192.168.0.1
      config:
        $ref: '#/definitions/response_of_get_configuration'
  response_of_search_groups:
    required:
      - groups
    properties:
      groups:
        type: array
        items:
          $ref: '#/definitions/search_group_return'
  response_of_search_nodes:
    required:
      - nodes
    properties:
      nodes:
        type: array
        items:
          $ref: '#/definitions/search_node_return'
  response_of_search_apps:
    required:
      - apps
    properties:
      apps:
        type: array
        items:
          $ref: '#/definitions/search_app_return'
  response_of_node_register:
    required:
      - id
    properties:
      id:
        type: string
        example: node_id_sample
  response_of_get_nodes:
    required:
      - nodes
    properties:
      nodes:
        type: array
        items:
          $ref: '#/definitions/node'
  response_of_get_node:
    $ref: '#/definitions/node'
  response_of_app_list:
    required:
      - apps
    properties:
      apps:
        type: array
        items:
          $ref: '#/definitions/app_info'
  app_info:
    required:
      - id
      - state
    properties:
      id:
        type: string
        example: app_id_sample
      state:
        type: string
        example: running
  response_of_get_app:
    required:
      - id
      - state
      - description
      - images
      - services
    properties:
      id:
        type: string
        example: app_id_sample
      state:
        type: string
        example: running
      description:
        $ref: '#/definitions/docker-compose'
      images:
        type: array
        example:
          - {"name":"docker image repository"}
      services:
        type: array
        example:
          - {"name":"container name", "cid":"container ID", "ports":[], "state":{"exitcode": "0","status": "running"}}
  response_of_deployment:
    required:
      - id
    properties:
      id:
        type: string
        example: app_id_sample
  response_of_get_resource:
    required:
      - cpu
      - mem
      - disk
    properties:
      cpu:
        $ref: '#/definitions/cpu'
      mem:
        $ref: '#/definitions/mem'
      disk:
        $ref: '#/definitions/disk'
  response_of_app_resource:
    required:
      - services
    properties:
      services:
        type: array
        example:
          - {"blockinput": "0.000B", "blockoutput": "0.000B", "cid": "abcd1234", "cname": "service1", "cpu": "0.000%",      "mem": "0.00%", "memlimit": "0.000B", "memusage": "0.000B", "networkinput": "0.000B", "networkoutput": "0.000B", "pids": 0}
  response_of_get_configuration:
    required:
      - properties
    properties:
      properties:
        type: array
        example:
          - {"deviceid": "00000000-0000-0000-0000-000000000000", "readOnly":true}
          - {"devicename":"EdgeDevice", "readOnly":false}
          - {"pinginterval":"10", "readOnly":false}
          - {"os":"linux", "readOnly":true}
          - {"processor":[{"cpu":"0", "modelname":"Intel(R) Core(TM) i7-2600 CPU @ 3.40GHz"}], "readOnly":true}
          - {"platform":"Ubuntu 16.04.3 LTS", "readOnly":true}
          - {"reverseproxy":{"enabled":true}, "readOnly":true}
  response_of_notification:
    required:
      - id
    properties:
      id:
        type: string
        example: "82424138b60bf19f5cbece5c8ca68a8567bcae0b"